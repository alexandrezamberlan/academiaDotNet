
Roteiro das aulas

================================================
26/04
https://github.com/alexandrezamberlan/academiaDotNet

Sistema de Versionamento de Código/Texto
    - Serviço Git: serviço gratuito para versionamento de código
    - Portal GitHub: servidor Web que gera serviço git
    - Comandos
    - https://github.com/alexandrezamberlan/oficinaGit
    - alexandrezamberlan
    
    - Quando o computador pessoal apresenta problemas de credenciamento. Executar no terminal
    git config --global user.name "Fulano de Tal"
    git config --global user.email fulano@exemplo.com.br

Ambientes de Desenvolvimento (IDE - Integrated Development Environment)
    - Visual Studio Code (VS Code)
    - Visual Studio
    
================================================
28/04
Visual Studio 2022
Github
Exercícios de programação sequencial -> variáveis e instruções básicas (leitura, escrita e atribuição)

================================================
03/05
Sites de apoio em C# - https://www.w3schools.com/cs/index.php
Resolução de alguns exercícios de programação sequencial 
Boas práticas de desenvolvimento:
    1) versionamento de código
    2) acessar/ler/estudar documentação da tecnologia
    3) documentação ou comentários

================================================
10/05
Desvio condicional ou instruções de controle por SELEÇÃO 
    - Material do professor Ricardo
    - Instrução de controle de desvio condicional SWITCH
    - https://www.w3schools.com/cs/cs_switch.php

Classes:
    - string
    - Random
    - DateTime - https://docs.microsoft.com/pt-br/dotnet/api/system.datetime.now?view=net-6.0
    - List
    - Math 

================================================
12/05
Instruções de controle de repetição

Independente da instrução de repetição utilizada, é preciso garantir 3 situações na repetição:
1 - inicialização da variável de controle da repetição
2 - usar a variável de controle em teste de parada/continuação (CONDIÇÃO)
3 - transformar a variável de controle

C#
    do { //PRIMEIRO EXECUTA E DEPOIS TESTA
        //bloco de instruções que será repetido enquanto a condição do while for VERDADEIRA ou true
    } while (CONDIÇÃO);

    ------

    while ( CONDIÇÃO ) { //PRIMEIRO TESTA E DEPOIS EXECUTA
        //bloco de instruções que será repetido enquanto a condição do while for VERDADEIRA 
    }

    ------

    for ( ; CONDIÇÃO ; ) { //PARA ESSA SITUAÇAO, ENQUANTO FOR VERDADE A CONDIÇÃO FAÇA O BLOCO DE INSTRUÇÕES

    }

================================================
18/5
Drops em C#: List, Random, string e StreamReader

Construção de programas para trabalhar com i) dados de glicemia; ii) dados de emails com listas e arquivos

================================================
19/5
Refatorar o programa do email e gravar em arquivo (StreamWriter)

Teoria da Orientação a Objetos - Exemplo da Glicemia
    - como criar uma Classe
    - como instanciar um objeto dessa Classe

================================================
24/05
Processo de avaliação 
Documentação OO .net -> https://docs.microsoft.com/pt-br/dotnet/api/?view=net-6.0

Orientação a Objetos -> TERCEIRIZAÇÃO

    - Problema das listagens dos alunos (disciplinas de Estruturas de Dados e Linguagem de Programação)
    - Arquivos .txt com nomes dos matriculados (matricula;nome;email)

    Listas -> List (Count, Add(), AddRange(), Remove(), Contains())
    Console -> Console (WriteLine(), ReadLine(), ReadKey(), Clear())
    Arquivo Texto -> StreamReader (ReadLine(), StreamReader(), EndOfStream(), Close())
    Aluno -> criar a classe aluno -> seus atributos e seus serviços
    Utilidades -> criar a classe Util -> com serviços comuns de arquivo e listas

Exercícios: 6_exerciciosOrientacaoObjetos.txt

================================================
26/05
Teoria ou no Paradigma da Orientação Objetos
    - Abordagem mais real -> TERCEIRIZAÇÃO
        - atributo/variável/característica/propriedade -> aspectos estruturais -> mapeado em BD
        - método/operação/função/funcionalidade/comportamento -> aspectos funcionais -> serviços

    - Desafio: programa no VS, com menu, para cadastrar usuários no sistema e gerar seus emails
               automaticamente. Os usuários (nome completo e email) devem ser persistidos em arquivo.
               Além disso, é preciso mantê-los em uma lista dinâmica em memória, que é populada sempre que 
               o programa executa.

                Menu
                1 - Cadastrar usuário (só o nome completo)
                        - gerar o email 
                        - verificar se este email já foi gerado (na lista)
                        - caso não exista, colocar na lista e persistir no arquivo: nome completo;email
                2 - Listar os usuários (nome completo e email)
                        - mostrar ordenado (pode)
                3 - Sair 
                Opção: 

                Observações: Classe Usuário (construtor, getters/setters, gerarEmail); List; StreamWriter; StreamReader

================================================
31/5 - Projeto de Banco de Dados
     visão geral 
     arquitetura de sistemas
     modelagem de banco de dados

================================================
02/6 - Projeto de Banco de dados
    Antigamente, BD era o foco do sistema - Modelagem Entidade-relacionamento
        - Aspectos estruturais -> atributos ou propriedades ou características ou variáveis de uma categora ou classe ou entidade ou tabela do BD
            - categoria ou entidade ou tabela
            - atributos 
            - atributo(s) identificação (chave primária) -> garante a unicidade de um dado na entidade
            - relacionamento entre entidades 
                //modelo lógico
                Funcionario (codigoFuncionario, nome, funcao, dataNascimento, dataAdmissao, endereco, email, fone)
                    codigoFuncionario é chave-primária    

                Dependente (codigoDependente, codigoFuncionario, nome)
                    codigoDependente é chave-primária
                    codigoFuncionario é chave-estrangeira e referencia Funcionario
                
                Funcionario 1..1 --------- 0..n Dependente

                Funcionario (14053, 'Alexandre Zamberlan', 'Professor', '08/09/1974', '01/07/2099', ...)

                Dependente (1000, 14053, 'Dante Zamberlan')
                Dependente (1001, 14053, 'Tales Zamberlan')

    Atualmente, o foco na construção dos sistemas é a modelagem de aspectos funcionais, e a partir daí chegamos no banco.

            public class Funcionario {
                int codigoFuncionario;
                string nome;
                string funcao;
                DateTime dataNascimento;
                DateTime dataAdmissao;
                string endereco;
                string email;
                string fone;

                public Funcionario() {

                }

                public Funcionario(int cod, string nome) {
                    this.codigoFuncionario = cod;
                    this.nome = nome;
                }

                //getters e setters
            }

            public class Dependente {
                int codigoDependente;
                Funcionario funcionario;
                string nome;

                public Dependente(int cod, Funcionario f, string n) {
                    this.codigoDependente = cod;
                    this.funcionario = f;
                    this.nome = n;
                }

                //getters e setters
            }

            Existem 3 tipos de modelagem de BD:
            1) modelagem conceitual -> diagramas em desenho -> dá ideia de entidades, atributos, atributos identificadores, relacionamentos
            2) modelagem lógica -> dá ideia de tabela, atributos, chaves primária e estrangeira (relacionamento na prática)
            3) modelagem física -> dá ideia do banco com seus atributos, tipos, restrições (constrains)

            Foco da aula é tratar descrições de problemas, pensar OO, identificar as cardinalidades (), chaves-estrangeiras.

================================================
07/06 - SQL

    Banco de Dados       -> SGBD / Engines                          -> SQL

    Conjunto de arquivos -> Serviços                                -> Linguagem

    Tabelas/Classe       -> Segurança/Consistênica/Integridade      -> DDL, DML, TCL, DCL

    Chave Primária, Chave Estrangeira -> SGBD e SQL trabalham

    Descritivo/requisitos -> modelagem lógica de banco de dados -> tabelas, chaves primárias, chaves estrangeiras, cardinalidade, relacionamento


    LINGUAGEM SQL -> ANSI
        MySQL - SQL ANSI
        SQL Server - Transact SQL
        Oracle - PL SQL

    SQL -> linguagem em BD e SGBD
        DDL - Data Definition Language (objetos)
            create (banco de dados ou tabelas)
            alter (banco de dados ou tabelas)
            drop (banco de dados ou tabelas)

        DML - Data Manipulation Language (dados)
            insert (dados em tabelas)
            update (dados em tabelas)
            delete (dados em tabelas)
            select (dados em tabelas)

        TCL - Transaciton Control Language (transações -> insert, update, delete) - SGBD   
            commit
            rollback

        DCL - Data Control Language (segurança para usuários)
            grant 
            revoke

================================================
09/06 - Desafio da Garagem, tutorial Windows Form + OO + List + Arquivo, Exercícios de SQL 


1) Construir um sistema em Visual Studio, C# e com Windows Form para entrada, saídas de veículos e as devidas cobranças.

2) Tutorial - https://youtu.be/JgBqsIffWdU

3) Exercícios SQL - academiaDotNet/codigosAlexandre/8_bancoDados/sqlServer_transactSQL/scriptEditora_sqlServer.sql

================================================
11/06 - Desafio da Garagem

    Form 
    Classes Veiculo e Persistencia

================================================
14/06 - ADO.Net

Tutorial ADO .Net C# - https://docs.microsoft.com/pt-br/visualstudio/data-tools/create-a-windows-form-to-search-data?view=vs-2022
Criando um APP básico - https://docs.microsoft.com/pt-br/visualstudio/data-tools/create-a-simple-data-application-by-using-adonet?view=vs-2022


Material de apoio
https://github.com/alexandrezamberlan/academiaDotNet/tree/main/materialApoio/ADO.NET

Exemplo
https://github.com/alexandrezamberlan/academiaDotNet/tree/main/codigosAlexandre/13_WinFormsAppConectandoBD


APP Visual Studio Windows Form < ----  ADO ---- > BD < ----- > SGBD

    ADO conecta APP com BD, entretanto, é preciso dominar SQL (select, insert, delete, update)

================================================
21/6 - Atos Day

================================================
23/6 - Trabalho ADO Ricardo e ajuda nos desafios anteriores

================================================
28/6 - Serialização
Material do professor Ricardo Frohlich na pasta materialApoio -> Serialização.pdf

https://docs.microsoft.com/pt-br/dotnet/csharp/programming-guide/concepts/serialization/

Códigos de estudo (github professor Ricardo Frohlich):
https://github.com/ricardosma/WindowsFormsSerializacao


OS SISTEMAS EM GERAL SÃO HETEROGÊNEOS
    - Sistema Operacional diferentes
    - Serviços do SO
    - Banco de Dados diferentes
    - Tecnologias de desenvolvimento diferentes 
    - Arquitetura de funcionamento (Desktop, Web e Mobile)

    Exemplos:

    Sistema 1: Sistema Financeiro -> Desktop, Windows, BD SQL Server, Asp.Net
        BD 1
    Sistema 2: Sistema Acadêmico -> Web, Unix, BD PostGres, PHP 
        BD 2
    Sistema 3: Sistema de RH - > Web, Windows Server, BD Sql Server, C#
        BD 3


    S1  -    S2   -   S3
      
    Como compartilhar dados -> WEBSERVICES -> Protocolos Internet (Endereço IP, Porta Lógica, Socket, Protocolos de transporte TCP e UDP)

SOAP vs REST 
    - SOAP + XML + W3C -> WEBSERVICES (SOAP é ultrapassada)
        - arquitetura cliente-servidor
        
    - REST + JSON -> WEBSERVICES
        - arquitetura cliente-servidor
            - servidor e cliente são transparentes ao outro
        - C# -> System.Text.Json -> JsonSerializer


================================================
30/6 - Serialização
    Exercícios:
        Windows Form + List ou DataGrid + Serializador ou Deserializador (binário ou xml ou soap ou json)
            Arquivo serializado 'substitui' o banco de dados 

================================================
05/7 - Entity Framework - EF
    ORM ou Mapeamento Objeto Relacional (banco de dados e a orientação a objetos são conectados e gerados automaticamente)

    Sugestão de vídeos aulas:
    1) https://www.youtube.com/watch?v=QjetGzyyOHI - Danilo Aparecido 
    2)

    Estratégias:

        1 - Database first  -> foco no banco
        2 - Model first
        3 - Code first      -> foco na OO -> pensa no modelo OO e o banco é gerado pelo ORM (migração)
            - gerenciador de pacotes
                - NuGet ou Console
                - Instalando pacotes 
                - Realizando migrações (conversões de OO para BD)

    
        PROJETO OO <-> ORM <-> BD













